const socket = io();
const localVideo = document.createElement('video');
localVideo.autoplay = true;
localVideo.muted = true;       // –Ω—É–∂–Ω–æ –¥–ª—è –∞–≤—Ç–æ–ø–ª–µ—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
localVideo.playsInline = true; // –¥–ª—è Safari –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö

const videosContainer = document.getElementById('videos');
videosContainer.appendChild(localVideo);

let localStream;
let peers = {}; // {socketId: RTCPeerConnection}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async function startLocalStream() {
    try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;
        await localVideo.play().catch(err => console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ:", err));
        console.log("üé• –ö–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–Ω—ã");
        socket.emit("ready");
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã:", err);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.");
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ (Chrome) –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è Safari/iOS
if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
    const btn = document.createElement('button');
    btn.innerText = "–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É";
    btn.onclick = startLocalStream;
    document.body.appendChild(btn);
} else {
    startLocalStream();
}

// –°–æ–∑–¥–∞–Ω–∏–µ peerConnection
function createPeerConnection(socketId) {
    const peer = new RTCPeerConnection({
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            {
                urls: [
                    'turn:weplok.ru:8347?transport=udp',
                    'turn:weplok.ru:8347?transport=tcp'
                ],
                username: 'weplok',
                credential: 'weplok'
            }
        ],
        iceCandidatePoolSize: 10
    });

    // –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–µ–∫–æ–≤
    if (localStream) {
        localStream.getTracks().forEach(track => peer.addTrack(track, localStream.clone()));
    } else {
        console.warn("‚è≥ localStream –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ peerConnection");
    }

    // ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    peer.onicecandidate = event => {
        if (event.candidate) {
            socket.emit('ice-candidate', { candidate: event.candidate, to: socketId, from: socket.id });
        }
    };

    // –ü–æ–ª—É—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
    peer.ontrack = event => {
        let remoteVideo = document.getElementById(socketId);
        if (!remoteVideo) {
            remoteVideo = document.createElement('video');
            remoteVideo.id = socketId;
            remoteVideo.autoplay = true;
            remoteVideo.playsInline = true;
            videosContainer.appendChild(remoteVideo);
        }
        remoteVideo.srcObject = event.streams[0];
        remoteVideo.play().catch(err => console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–∑–∞–ø—É—Å—Ç–∏—Ç—å remote video:", err));
    };

    // –õ–æ–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    peer.onconnectionstatechange = () => {
        console.log(`üîó ${socketId} connection state:`, peer.connectionState);
    };

    return peer;
}

// Socket.io —Å–æ–±—ã—Ç–∏—è
socket.on('new-user', async socketId => {
    console.log("üü¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", socketId);
    const peer = createPeerConnection(socketId);
    peers[socketId] = peer;

    try {
        const offer = await peer.createOffer();
        await peer.setLocalDescription(offer);
        socket.emit('offer', { sdp: offer, to: socketId, from: socket.id });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ offer:", err);
    }
});

socket.on('offer', async data => {
    console.log("üì© –ü–æ–ª—É—á–µ–Ω offer –æ—Ç", data.from);
    const peer = createPeerConnection(data.from);
    peers[data.from] = peer;

    try {
        await peer.setRemoteDescription(data.sdp);
        const answer = await peer.createAnswer();
        await peer.setLocalDescription(answer);
        socket.emit('answer', { sdp: answer, to: data.from, from: socket.id });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ offer:", err);
    }
});

socket.on('answer', async data => {
    const peer = peers[data.from];
    if (!peer) return;
    try {
        await peer.setRemoteDescription(data.sdp);
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ answer:", err);
    }
});

socket.on('ice-candidate', async data => {
    const peer = peers[data.from];
    if (!peer) return;
    try {
        await peer.addIceCandidate(data.candidate);
    } catch (err) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE:", err);
    }
});

socket.on('user-disconnected', socketId => {
    console.log("üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:", socketId);
    if (peers[socketId]) {
        peers[socketId].close();
        delete peers[socketId];
        const vid = document.getElementById(socketId);
        if (vid) vid.remove();
    }
});
