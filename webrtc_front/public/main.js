const socket = io();
const localVideo = document.createElement('video');
localVideo.autoplay = true;
localVideo.muted = true;
localVideo.playsInline = true;

const videosContainer = document.getElementById('videos');
videosContainer.appendChild(localVideo);

let localStream;
let peers = {}; // {socketId: RTCPeerConnection}
let senders = {}; // {socketId: {video: RTCRtpSender, audio: RTCRtpSender}}
let videoEnabled = true;
let audioEnabled = true;

// –ó–∞–ø—Ä–æ—Å –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async function startLocalStream(retry = true) {
    try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;
        await localVideo.play().catch(err => console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ:", err));
        console.log("üé• –ö–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–Ω—ã");
        socket.emit("ready");
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã:", err);
        if (retry) {
            console.log("‚è≥ –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...");
            setTimeout(() => startLocalStream(false), 15000);
        } else {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.");
        }
    }
}

if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
    const btn = document.createElement('button');
    btn.innerText = "–í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É";
    btn.onclick = () => startLocalStream();
    document.body.appendChild(btn);
} else {
    startLocalStream();
}

// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ
const controls = document.createElement('div');
controls.style.margin = "10px";

const videoBtn = document.createElement('button');
videoBtn.innerText = "–í—ã–∫–ª –≤–∏–¥–µ–æ";
videoBtn.onclick = () => {
    if (!localStream) return;
    videoEnabled = !videoEnabled;
    localStream.getVideoTracks().forEach(track => track.enabled = videoEnabled);

    // –û—Ç–∫–ª—é—á–∞–µ–º/–≤–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ –ø–æ –≤—Å–µ–º peerConnection
    Object.values(senders).forEach(s => {
        if (s.video) s.video.track.enabled = videoEnabled;
    });

    videoBtn.innerText = videoEnabled ? "–í—ã–∫–ª –≤–∏–¥–µ–æ" : "–í–∫–ª –≤–∏–¥–µ–æ";
};

const audioBtn = document.createElement('button');
audioBtn.innerText = "–í—ã–∫–ª –∑–≤—É–∫";
audioBtn.onclick = () => {
    if (!localStream) return;
    audioEnabled = !audioEnabled;
    localStream.getAudioTracks().forEach(track => track.enabled = audioEnabled);

    // –û—Ç–∫–ª—é—á–∞–µ–º/–≤–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ –ø–æ –≤—Å–µ–º peerConnection
    Object.values(senders).forEach(s => {
        if (s.audio) s.audio.track.enabled = audioEnabled;
    });

    audioBtn.innerText = audioEnabled ? "–í—ã–∫–ª –∑–≤—É–∫" : "–í–∫–ª –∑–≤—É–∫";
};

controls.appendChild(videoBtn);
controls.appendChild(audioBtn);
document.body.appendChild(controls);

// –°–æ–∑–¥–∞–Ω–∏–µ peerConnection
function createPeerConnection(socketId) {
    const peer = new RTCPeerConnection({
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            {
                urls: [
                    'turn:weplok.ru:8347?transport=udp',
                    'turn:weplok.ru:8347?transport=tcp'
                ],
                username: 'weplok',
                credential: 'weplok'
            }
        ],
        iceCandidatePoolSize: 10
    });

    senders[socketId] = { video: null, audio: null };

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º RTCRtpSender
    if (localStream) {
        localStream.getTracks().forEach(track => {
            const sender = peer.addTrack(track, localStream);
            if (track.kind === 'video') senders[socketId].video = sender;
            if (track.kind === 'audio') senders[socketId].audio = sender;
        });
    }

    peer.onicecandidate = event => {
        if (event.candidate) {
            socket.emit('ice-candidate', { candidate: event.candidate, to: socketId, from: socket.id });
        }
    };

    peer.ontrack = event => {
        let remoteVideo = document.getElementById(socketId);
        if (!remoteVideo) {
            remoteVideo = document.createElement('video');
            remoteVideo.id = socketId;
            remoteVideo.autoplay = true;
            remoteVideo.playsInline = true;
            videosContainer.appendChild(remoteVideo);
        }
        remoteVideo.srcObject = event.streams[0];
        remoteVideo.play().catch(err => console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–∑–∞–ø—É—Å—Ç–∏—Ç—å remote video:", err));
    };

    peer.onconnectionstatechange = () => {
        console.log(`üîó ${socketId} connection state:`, peer.connectionState);
    };

    return peer;
}

// Socket.io —Å–æ–±—ã—Ç–∏—è
socket.on('new-user', async socketId => {
    console.log("üü¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", socketId);
    const peer = createPeerConnection(socketId);
    peers[socketId] = peer;

    try {
        const offer = await peer.createOffer();
        await peer.setLocalDescription(offer);
        socket.emit('offer', { sdp: offer, to: socketId, from: socket.id });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ offer:", err);
    }
});

socket.on('offer', async data => {
    const peer = createPeerConnection(data.from);
    peers[data.from] = peer;

    try {
        await peer.setRemoteDescription(data.sdp);
        const answer = await peer.createAnswer();
        await peer.setLocalDescription(answer);
        socket.emit('answer', { sdp: answer, to: data.from, from: socket.id });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ offer:", err);
    }
});

socket.on('answer', async data => {
    const peer = peers[data.from];
    if (!peer) return;
    try {
        await peer.setRemoteDescription(data.sdp);
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ answer:", err);
    }
});

socket.on('ice-candidate', async data => {
    const peer = peers[data.from];
    if (!peer) return;
    try {
        await peer.addIceCandidate(data.candidate);
    } catch (err) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE:", err);
    }
});

socket.on('user-disconnected', socketId => {
    console.log("üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:", socketId);
    if (peers[socketId]) {
        peers[socketId].close();
        delete peers[socketId];
        delete senders[socketId];
        const vid = document.getElementById(socketId);
        if (vid) vid.remove();
    }
});
